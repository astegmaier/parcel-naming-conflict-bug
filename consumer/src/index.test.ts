import * as Parcel from "test-library-parcel";
import * as Tsc from "test-library-tsc";

describe("Wildcard export names conflicting with named exports", () => {
    it("Tsc should prefer the named export when it is _after_ the wildcard export.", () => {
        expect(Tsc.nameConflict1.messageFromIndex).toBe("this instance of nameConflict1 is from index.ts");
    });
    it("Parcel should prefer the named export when it is _after_ the wildcard export.", () => {
        expect(Parcel.nameConflict1.messageFromIndex).toBe("this instance of nameConflict1 is from index.ts");
    });
    it("Tsc should prefer the named export when it is _before_ the wildcard export.", () => {
        expect(Tsc.nameConflict2.messageFromIndex).toBe("this instance of nameConflict2 is from index.ts");
    })

    // This is the bug:
    it("Parcel should prefer the named export when it is _before_ the wildcard export, but the type definitions don't align with this behavior.", () => {
        // @ts-expect-error: Property 'messageFromIndex' does not exist on type '{ messageFromOther2: string; }
        expect(Parcel.nameConflict2.messageFromIndex).toBe("this instance of nameConflict2 is from index.ts");
        // The d.ts file generated by parcel says "messageFromOther2" is a "string", but it is undefined at runtime.
        expect(Parcel.nameConflict2.messageFromOther2).toBe(undefined);
    });
})